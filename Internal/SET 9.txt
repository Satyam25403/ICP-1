SET 9:
import java.net.*;
import java.util.Scanner;

public class UDPServer {
    public static void main(String[] args) {
        try (DatagramSocket serverSocket = new DatagramSocket(12345)){
            byte[] receiveBuffer = new byte[1024];
            byte[] sendBuffer;
            Scanner scanner = new Scanner(System.in);

            System.out.println("Server is listening on port 12345");

            while (true) {
                // Receive packet and process
                DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                serverSocket.receive(receivePacket);
                String clientMessage = new String(receivePacket.getData(), 0, receivePacket.getLength());
                System.out.println("Client: " + clientMessage);
                if (clientMessage.equals("exit")) {
                    System.out.println("Client disconnected");
                    break;
                }

                //send response to client on its address and port number:response is sent through buffer::getBytes()
                InetAddress clientAddress = receivePacket.getAddress();
                int clientPort = receivePacket.getPort();
                System.out.print("Server: ");
                String serverMessage = scanner.nextLine();
                sendBuffer = serverMessage.getBytes();
                DatagramPacket sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
                serverSocket.send(sendPacket);
                if (serverMessage.equals("exit")) {
                    System.out.println("Server disconnected");
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



import java.net.*;
import java.util.Scanner;

public class UDPChatClient {
    public static void main(String[] args) {
        try (DatagramSocket clientSocket = new DatagramSocket()) {
            InetAddress serverAddress = InetAddress.getByName("localhost");
            byte[] sendBuffer;
            byte[] receiveBuffer = new byte[1024];
            Scanner scanner = new Scanner(System.in);

            while (true) {
                // Send message using packet
                System.out.print("Client: ");
                String clientMessage = scanner.nextLine();
                sendBuffer = clientMessage.getBytes();
                DatagramPacket sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, serverAddress, 12345);
                clientSocket.send(sendPacket);
                if (clientMessage.equals("exit")) {
                    System.out.println("Client disconnected");
                    break;
                }

                // Receive response
                DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                clientSocket.receive(receivePacket);
                String serverMessage = new String(receivePacket.getData(), 0, receivePacket.getLength());
                System.out.println("Server: " + serverMessage);
                if (serverMessage.equals("exit")) {
                    System.out.println("Server disconnected");
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}













<!DOCTYPE html>
<html>
    <head>

    </head>
    <body>
        <%! int i=0; %>
        <%
            Cookie cookie=new Cookie("count",i+"");
            response.addCookie(cookie);
            i++;
        %>
        <h3>The number of page visits:<%= cookie.getValue() %></h3>
    </body>

</html>
                             